{"version":3,"sources":["data/Firebase.js","components/enterScore.js","components/leaderBoard.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","provider","auth","GoogleAuthProvider","EnterScore","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handlePointsChange","bind","assertThisInitialized","handleCupChange","state","database","ref","push","uid","userInfo","points","pointsValue","cup","cupValue","date","Date","username","displayName","photoURL","e","setState","target","value","_this2","react_default","a","createElement","Grid","Row","Col","xs","sm","FormGroup","ControlLabel","FormControl","type","prixPoints","placeholder","onChange","componentClass","style","textAlign","Button","bsStyle","onClick","saveScore","Component","Scores","length","scores","map","score","i","key","LeaderBoard","on","snapshot","data","val","keys","forEach","k","leaderBoard_Scores","App","defineProperty","showAddScore","onAuthStateChanged","user","setUser","signInWithPopup","_this3","className","login","toggleAddScore","enterScore","leaderBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e15a3a80.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst config = {\n    apiKey: \"AIzaSyCUVExBS8-J9U458sNtB95fwzQNBPSl5Rk\",\n    authDomain: \"mctracker-42d0f.firebaseapp.com\",\n    databaseURL: \"https://mctracker-42d0f.firebaseio.com\",\n    projectId: \"mctracker-42d0f\",\n    storageBucket: \"mctracker-42d0f.appspot.com\",\n    messagingSenderId: \"218378060918\"\n};\n\nfirebase.initializeApp(config);\n\nexport const provider = new firebase.auth.GoogleAuthProvider();\nexport const auth = firebase.auth();\nexport default firebase;\n","import React, { Component } from 'react';\n\nimport firebase from '../data/Firebase.js';\n\nimport {\n    FormGroup,\n    ControlLabel,\n    FormControl,\n    HelpBlock,\n    Grid,\n    Row,\n    Col,\n    Button\n} from 'react-bootstrap';\n\nclass EnterScore extends Component {\n  constructor(props) {\n      super(props);\n\n      this.handlePointsChange = this.handlePointsChange.bind(this);\n      this.handleCupChange = this.handleCupChange.bind(this);\n\n      this.state = {\n      };\n  }\n\n  saveScore() {\n      let itemsRef = firebase.database().ref('scores/');\n\n      itemsRef.push({\n          uid: this.props.userInfo.uid,\n          points: this.state.pointsValue,\n          cup: this.state.cupValue,\n          date: new Date(),\n          username: this.props.userInfo.displayName,\n          photoURL: this.props.userInfo.photoURL\n      });\n  }\n\n  handlePointsChange(e) {\n      this.setState({ pointsValue: e.target.value });\n  }\n\n  handleCupChange(e) {\n      this.setState({ cupValue: e.target.value });\n  }\n\n  render() {\n    return (\n        <form>\n            <Grid>\n                <Row>\n                    <Col xs={12} sm={6}>\n                        <FormGroup>\n                            <ControlLabel>Points</ControlLabel>\n                            <FormControl\n                                type=\"number\"\n                                value={this.state.prixPoints}\n                                placeholder=\"\"\n                                onChange={this.handlePointsChange}\n                            />\n                        </FormGroup>\n                    </Col>\n                    <Col xs={12} sm={6}>\n                        <FormGroup>\n                            <ControlLabel>Cup</ControlLabel>\n                            <FormControl\n                                componentClass=\"select\"\n                                placeholder=\"select\"\n                                onChange={this.handleCupChange}\n                            >\n                                <option value=\"mushroom\">Mushroom</option>\n                                <option value=\"other\">...</option>\n                            </FormControl>\n                        </FormGroup>\n                    </Col>\n                    <Col xs={12} style={{textAlign:'right'}}>\n                        <Button bsStyle=\"primary\" onClick={() => {this.saveScore()}}>Add Score</Button>\n                    </Col>\n                </Row>\n            </Grid>\n        </form>\n    );\n  }\n}\n\nexport default EnterScore;\n","import React, { Component } from 'react';\n\nimport firebase from '../data/Firebase.js';\n\nconst Scores = (props) => {\n    if (props.length === 0) {\n        return;\n    } else {\n        return  (\n            props.scores.map((score,  i) => {\n                return <h3 key={i}>{score.username} {score.points}</h3>\n            })\n        );\n    }\n};\n\nclass LeaderBoard extends Component {\n    constructor(props) {\n        super();\n        this.state = {\n            scores: []\n        };\n    }\n\n    componentDidMount() {\n        const itemsRef = firebase.database().ref('scores/');\n\n        itemsRef.on('value', (snapshot) => {\n            const data = snapshot.val();\n            const keys = Object.keys(data);\n            let scores = [];\n\n            keys.forEach((k) => {\n                scores.push(data[k]);\n            })\n\n\n            this.setState({\n                scores: scores\n            })\n\n        });\n\n    }\n\n    render() {\n        return  <div>\n            <h2>LeaderBoard</h2>\n            <Scores scores={this.state.scores} />\n        </div>\n    }\n}\n\nexport default LeaderBoard;\n","import React, { Component } from 'react';\n\nimport './App.css';\n\nimport firebase, { auth, provider } from './data/Firebase.js';\n\nimport {\n    Button\n} from 'react-bootstrap';\n\nimport EnterScore from './components/enterScore.js';\nimport LeaderBoard  from './components/leaderBoard.js';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            userInfo: null,\n            showAddScore: false,\n            userInfo: null\n        }\n    }\n    componentDidMount() {\n        !this.state.userInfo && auth.onAuthStateChanged((user) => {\n            user && this.setUser(user);\n        });\n    }\n    login() {\n        auth.signInWithPopup(provider);\n    }\n    setUser(userInfo) {\n        !this.state.userInfo && this.setState({ userInfo: userInfo });\n    }\n    toggleAddScore() {\n        this.setState({\n            showAddScore: !this.state.showAddScore\n        })\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h1>Mario Kart Tracker</h1>\n                    {this.state.userInfo && <h2>Welcome {this.state.userInfo.displayName}</h2>}\n                </header>\n                {!this.state.userInfo && <Button bsStyle=\"primary\" onClick={this.login()}>Log In</Button>}\n                {\n                    this.state.userInfo &&\n                    <div>\n                        {\n                            !this.state.showAddScore &&\n                            <Button bsStyle=\"primary\" onClick={() => {this.toggleAddScore()}}>Add Score</Button>\n                        }\n\n                        {\n                            this.state.showAddScore &&\n                            <EnterScore userInfo={this.state.userInfo} />\n                        }\n                    </div>\n                }\n                <LeaderBoard />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}